cmake_minimum_required(VERSION 3.16)
project(Ascend_c)

include(CheckCXXCompilerFlag)
check_cxx_compiler_flag("-std=c++17" COMPILER_SUPPORTS_CXX17)

set(RUN_MODE "npu" CACHE STRING "cpu/sim/npu")
set(SOC_VERSION "Ascend910B4" CACHE STRING "system on chip type")
set(ASCEND_CANN_PACKAGE_PATH "/usr/local/Ascend/ascend-toolkit/latest"
    CACHE STRING "ASCEND CANN package installation directory"
)
if(NOT CMAKE_BUILD_TYPE)
    set(CMAKE_BUILD_TYPE "Debug" CACHE STRING "Build type Release/Debug (default Debug)" FORCE)
endif()
if(CMAKE_INSTALL_PREFIX STREQUAL /usr/local)
    set(CMAKE_INSTALL_PREFIX "${CMAKE_CURRENT_LIST_DIR}/out" CACHE STRING "path for install()" FORCE)
endif()

set(Python_EXECUTABLE /usr/bin/python)
set(pybind11_DIR /usr/local/lib/python3.10/dist-packages/pybind11/share/cmake/pybind11)

function (run_python OUT EXPR ERR_MSG)
  execute_process(
    COMMAND
    "${Python_EXECUTABLE}" "-c" "${EXPR}"
    OUTPUT_VARIABLE PYTHON_OUT
    RESULT_VARIABLE PYTHON_ERROR_CODE
    ERROR_VARIABLE PYTHON_STDERR
    OUTPUT_STRIP_TRAILING_WHITESPACE)

  if(NOT PYTHON_ERROR_CODE EQUAL 0)
    message(FATAL_ERROR "${ERR_MSG}: ${PYTHON_STDERR}")
  endif()
  set(${OUT} ${PYTHON_OUT} PARENT_SCOPE)
endfunction()


macro (append_cmake_prefix_path PKG EXPR)
  run_python(_PREFIX_PATH
    "import ${PKG}; print(${EXPR})" "Failed to locate ${PKG} path")
  list(APPEND CMAKE_PREFIX_PATH ${_PREFIX_PATH})
endmacro()

append_cmake_prefix_path("torch" "torch.utils.cmake_prefix_path")
# set(CMAKE_PREFIX_PATH ${CMAKE_PREFIX_PATH} /usr/local/lib/python3.10/dist-packages/torch_npu)

find_package(Torch REQUIRED)
# message()
find_library(TORCH_PYTHON_LIBRARY torch_python "${TORCH_INSTALL_PREFIX}/lib")
# find_package(Torch_npu)

find_package(pybind11 REQUIRED)


# ${KERNEL_FILES} are used to compile library, push files written by ascendc in ${KERNEL_FILES}.
# ref to cmake/npu.cmake ascendc_library, cmake/cpu.cmake add_library
file(GLOB KERNEL_FILES 
${CMAKE_CURRENT_SOURCE_DIR}/custom_add.cpp
${CMAKE_CURRENT_SOURCE_DIR}/rope_quant.cpp)

file(GLOB WRAPPER_FILES ${CMAKE_CURRENT_SOURCE_DIR}/torch_wrapper.cpp)
include_directories(
    ${TORCH_INCLUDE_DIRS}
    /usr/local/lib/python3.10/dist-packages/torch_npu/include
    ${ASCEND_HOME_PATH}/include
    ${ASCEND_HOME_PATH}/aarch64-linux/include/experiment/platform/
)

if("${RUN_MODE}" STREQUAL "cpu")
    include(cmake/cpu_lib.cmake)
elseif("${RUN_MODE}" STREQUAL "sim" OR "${RUN_MODE}" STREQUAL "npu")
    include(cmake/npu_lib.cmake)
else()
    message("invalid RUN_MODE: ${RUN_MODE}")
endif()

# target_include_directories(my_module PRIVATE 
# ${TORCH_INCLUDE_DIRS}
# /usr/local/lib/python3.10/dist-packages/torch_npu/include
# ${ASCEND_HOME_PATH}/include
# )
# if(NOT USE_CXX11_ABI)
#     add_subdirectory(${PROJECT_SOURCE_DIR}/third_party/pybind11)
# endif()
pybind11_add_module(my_module ${WRAPPER_FILES})
message(STATUS "The ascend dir is  ${ASCEND_HOME_PATH}")
# add_library(my_module SHARED ${WRAPPER_FILES})
# set_target_properties(my_module PROPERTIES PREFIX "")
set_target_properties(my_module PROPERTIES
    CXX_STANDARD 17
    CXX_STANDARD_REQUIRED ON
    CXX_EXTENSIONS OFF
)
# target_compile_features(my_module PRIVATE cxx_std_17)
# add_executable(ascendc_kernels_bbit ${CMAKE_CURRENT_SOURCE_DIR}/main.cpp)

target_compile_options(my_module PRIVATE
    -O2 -std=c++17 -D_GLIBCXX_USE_CXX11_ABI=0 -Wall
)

get_target_property(MY_MODULE_CXX_STANDARD my_module CXX_STANDARD)
get_target_property(MY_MODULE_CXX_STANDARD_REQUIRED my_module CXX_STANDARD_REQUIRED)
get_target_property(MY_MODULE_CXX_EXTENSIONS my_module CXX_EXTENSIONS)
get_target_property(MY_MODULE_COMPILE_OPTIONS my_module COMPILE_OPTIONS)

message(STATUS "CXX_STANDARD: ${MY_MODULE_CXX_STANDARD}")
message(STATUS "CXX_STANDARD_REQUIRED: ${MY_MODULE_CXX_STANDARD_REQUIRED}")
message(STATUS "CXX_EXTENSIONS: ${MY_MODULE_CXX_EXTENSIONS}")
message(STATUS "COMPILE_OPTIONS: ${MY_MODULE_COMPILE_OPTIONS}")


link_directories(
    ${CMAKE_CURRENT_SOURCE_DIR}/lib/ascendc_kernels_npu
    /usr/local/lib/python3.10/dist-packages/torch_npu/lib/)

target_link_libraries(my_module PRIVATE
    # $<BUILD_INTERFACE:$<$<OR:$<STREQUAL:${RUN_MODE},npu>,$<STREQUAL:${RUN_MODE},sim>>:host_intf_pub>>
    $<BUILD_INTERFACE:$<$<STREQUAL:${RUN_MODE},cpu>:ascendcl>>
    # ascendc_kernels_${RUN_MODE}
    ascendc_kernels_npu
    tiling_api
    platform
)
target_link_libraries(my_module PRIVATE ${TORCH_LIBRARIES} /usr/local/lib/python3.10/dist-packages/torch_npu/lib/libtorch_npu.so ${TORCH_PYTHON_LIBRARY})
message(STATUS "TORCH LIBS: ${TORCH_LIBRARIES}")
# target_link_libraries(my_module PRIAVTE ${TORCH_NPU_LIBRARIES})

set(CMAKE_SHARED_LINKER_FLAGS "${CMAKE_SHARED_LINKER_FLAGS} -Wl,--no-as-needed")_module CXX_STAND
# target_link_libraries(my_module PRIVATE ascendc_kernels_npu)

# get_target_property(MY_LIB_COMPILE_OPTIONS ascendc_kernels_${RUN_MODE} COMPILE_OPTIONS)
# get_target_property(MY_LIB_INTERFACE_COMPILE_OPTIONS ascendc_kernels_${RUN_MODE} INTERFACE_COMPILE_OPTIONS)

# # 推断 PUBLIC 和 PRIVATE 选项
# if(MY_LIB_COMPILE_OPTIONS AND MY_LIB_INTERFACE_COMPILE_OPTIONS)
#     list(REMOVE_ITEM MY_LIB_COMPILE_OPTIONS ${MY_LIB_INTERFACE_COMPILE_OPTIONS})
#     message(STATUS "PRIVATE options: ${MY_LIB_COMPILE_OPTIONS}")
#     message(STATUS "PUBLIC options: ${MY_LIB_INTERFACE_COMPILE_OPTIONS}")
# elseif(MY_LIB_COMPILE_OPTIONS)
#     message(STATUS "PRIVATE options: ${MY_LIB_COMPILE_OPTIONS}")
# elseif(MY_LIB_INTERFACE_COMPILE_OPTIONS)
#     message(STATUS "INTERFACE options: ${MY_LIB_INTERFACE_COMPILE_OPTIONS}")
# endif()



install(TARGETS my_module
    LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR}
    ARCHIVE DESTINATION ${CMAKE_INSTALL_LIBDIR}
    RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR}
)